/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type * as prisma from './../../node_modules/.prisma/client/index'
import type { Context as ctx } from './../types'

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {}

export interface NexusGenEnums {}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AuthPayload: {
    // root type
    accessToken?: string | null // String
    user?: NexusGenRootTypes['User'] | null // User
  }
  InvalidUser: {
    // root type
    message: string // String!
  }
  Mutation: {}
  Post: prisma.Post
  Query: {}
  Subscription: {}
  User: prisma.User
  UserAlreadyExists: {
    // root type
    message: string // String!
  }
}

export interface NexusGenInterfaces {}

export interface NexusGenUnions {
  LoginResult:
    | NexusGenRootTypes['AuthPayload']
    | NexusGenRootTypes['InvalidUser']
  SignupResult:
    | NexusGenRootTypes['AuthPayload']
    | NexusGenRootTypes['UserAlreadyExists']
}

export type NexusGenRootTypes = NexusGenObjects & NexusGenUnions

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AuthPayload: {
    // field return type
    accessToken: string | null // String
    user: NexusGenRootTypes['User'] | null // User
  }
  InvalidUser: {
    // field return type
    message: string // String!
  }
  Mutation: {
    // field return type
    createDraft: NexusGenRootTypes['Post'] | null // Post
    deletePost: NexusGenRootTypes['Post'] | null // Post
    login: NexusGenRootTypes['LoginResult'] | null // LoginResult
    publish: NexusGenRootTypes['Post'] | null // Post
    signup: NexusGenRootTypes['SignupResult'] | null // SignupResult
  }
  Post: {
    // field return type
    author: NexusGenRootTypes['User'] | null // User
    content: string | null // String
    id: number // Int!
    published: boolean // Boolean!
    title: string // String!
  }
  Query: {
    // field return type
    me: NexusGenRootTypes['User'] | null // User
    post: NexusGenRootTypes['Post'] | null // Post
    posts: Array<NexusGenRootTypes['Post'] | null> // [Post]!
  }
  Subscription: {
    // field return type
    latestPost: NexusGenRootTypes['Post'] | null // Post
  }
  User: {
    // field return type
    email: string // String!
    id: number // Int!
    name: string | null // String
    posts: Array<NexusGenRootTypes['Post'] | null> // [Post]!
  }
  UserAlreadyExists: {
    // field return type
    message: string // String!
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: {
    // field return type name
    accessToken: 'String'
    user: 'User'
  }
  InvalidUser: {
    // field return type name
    message: 'String'
  }
  Mutation: {
    // field return type name
    createDraft: 'Post'
    deletePost: 'Post'
    login: 'LoginResult'
    publish: 'Post'
    signup: 'SignupResult'
  }
  Post: {
    // field return type name
    author: 'User'
    content: 'String'
    id: 'Int'
    published: 'Boolean'
    title: 'String'
  }
  Query: {
    // field return type name
    me: 'User'
    post: 'Post'
    posts: 'Post'
  }
  Subscription: {
    // field return type name
    latestPost: 'Post'
  }
  User: {
    // field return type name
    email: 'String'
    id: 'Int'
    name: 'String'
    posts: 'Post'
  }
  UserAlreadyExists: {
    // field return type name
    message: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createDraft: {
      // args
      content?: string | null // String
      title: string // String!
    }
    deletePost: {
      // args
      id: number // Int!
    }
    login: {
      // args
      email: string // String!
      password: string // String!
    }
    publish: {
      // args
      id?: number | null // Int
    }
    signup: {
      // args
      email: string // String!
      name?: string | null // String
      password: string // String!
    }
  }
  Query: {
    post: {
      // args
      id: number // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  LoginResult: 'AuthPayload' | 'InvalidUser'
  SignupResult: 'AuthPayload' | 'UserAlreadyExists'
}

export interface NexusGenTypeInterfaces {}

export type NexusGenObjectNames = keyof NexusGenObjects

export type NexusGenInputNames = never

export type NexusGenEnumNames = never

export type NexusGenInterfaceNames = never

export type NexusGenScalarNames = keyof NexusGenScalars

export type NexusGenUnionNames = keyof NexusGenUnions

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never

export type NexusGenAbstractsUsingStrategyResolveType =
  | 'LoginResult'
  | 'SignupResult'

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: ctx
  inputTypes: NexusGenInputs
  rootTypes: NexusGenRootTypes
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars
  argTypes: NexusGenArgTypes
  fieldTypes: NexusGenFieldTypes
  fieldTypeNames: NexusGenFieldTypeNames
  allTypes: NexusGenAllTypes
  typeInterfaces: NexusGenTypeInterfaces
  objectNames: NexusGenObjectNames
  inputNames: NexusGenInputNames
  enumNames: NexusGenEnumNames
  interfaceNames: NexusGenInterfaceNames
  scalarNames: NexusGenScalarNames
  unionNames: NexusGenUnionNames
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames']
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames']
  allNamedTypes:
    | NexusGenTypes['allInputTypes']
    | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames']
  abstractTypeMembers: NexusGenAbstractTypeMembers
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType
  features: NexusGenFeaturesConfig
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginInputFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
